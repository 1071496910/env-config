" A sensible vimrc for Go development
"
" Please note that the following settings are some default that I used
" for years. However it might be not the case for you (and your
" environment). I highly encourage to change/adapt the vimrc to your own
" needs. Think of a vimrc as a garden that needs to be maintained and fostered
" throughout years. Keep it clean and useful - Fatih Arslan

call plug#begin()
Plug 'fatih/vim-go'
Plug 'fatih/molokai'
Plug 'uarun/vim-protobuf'
"Plug 'AndrewRadev/splitjoin.vim'
Plug 'SirVer/ultisnips'
Plug 'honza/vim-snippets'
"Plug 'ctrlpvim/ctrlp.vim'
Plug 'nsf/gocode', { 'rtp': 'vim', 'do': '~/.vim/plugged/gocode/vim/symlink.sh' }
Plug 'majutsushi/tagbar'
Plug 'ervandew/supertab'
Plug 'ashfinal/vim-colors-violet'
Plug 'altercation/vim-colors-solarized'
Plug 'nanotech/jellybeans.vim'
Plug 'Lokaltog/vim-powerline'
Plug 'airblade/vim-gitgutter'
Plug 'powerline/powerline', {'rtp': 'powerline/bindings/vim/'}
"Plug 'stephpy/vim-yaml'
Plug 'elzr/vim-json'
Plug 'Valloric/YouCompleteMe'
Plug 'Rip-Rip/clang_complete'
Plug 'vim-syntastic/syntastic'
Plug 'scrooloose/nerdtree'
Plug 'Yggdroot/indentLine'
"Plug 'davidhalter/jedi-vim'
"Plug 'andrewstuart/vim-kubernetes'
"Plug 'ingydotnet/yaml-vim'
"Plug 'chase/vim-ansible-yaml'
call plug#end()

""""""""""""""""""""""
"      Settings      "
""""""""""""""""""""""
set nocompatible                " Enables us Vim specific features
filetype off                    " Reset filetype detection first ...
filetype plugin indent on       " ... and enable filetype detection
set ttyfast                     " Indicate fast terminal conn for faster redraw
set ttymouse=xterm2             " Indicate terminal type for mouse codes
set ttyscroll=3                 " Speedup scrolling
set laststatus=2                " Show status line always
set encoding=utf-8              " Set default encoding to UTF-8
set autoread                    " Automatically read changed files
set autoindent                  " Enabile Autoindent
set backspace=indent,eol,start  " Makes backspace key more powerful.
set incsearch                   " Shows the match while typing
set hlsearch                    " Highlight found searches
set noerrorbells                " No beeps
set number                      " Show line numbers
set showcmd                     " Show me what I'm typing
set noswapfile                  " Don't use swapfile
set nobackup                    " Don't create annoying backup files
set splitright                  " Vertical windows should be split to right
set splitbelow                  " Horizontal windows should split to bottom
set autowrite                   " Automatically save before :next, :make etc.
set hidden                      " Buffer should still exist if window is closed
set fileformats=unix,dos,mac    " Prefer Unix over Windows over OS 9 formats
set noshowmatch                 " Do not show matching brackets by flickering
set noshowmode                  " We show the mode with airline or lightline
set ignorecase                  " Search case insensitive...
set smartcase                   " ... but not it begins with upper case
set completeopt=menu,menuone    " Show popup menu, even if there is one entry
set pumheight=10                " Completion window max size
set nocursorcolumn              " Do not highlight column (speeds up highlighting)
set nocursorline                " Do not highlight cursor (speeds up highlighting)
set lazyredraw                  " Wait to redraw
set ts=4
set expandtab
"set mouse=a
"set fdm=syntax

" Enable to copy to clipboard for operations like yank, delete, change and put
" http://stackoverflow.com/questions/20186975/vim-mac-how-to-copy-to-clipboard-without-pbcopy
if has('unnamedplus')
  set clipboard^=unnamed
  set clipboard^=unnamedplus
endif

" This enables us to undo files even if you exit Vim.
if has('persistent_undo')
  set undofile
  set undodir=~/.config/vim/tmp/undo//
endif

" Colorscheme

syntax enable
set t_Co=256
let g:rehash256 = 1
let g:molokai_original = 1
"colorscheme jellybeans
colorscheme molokai
"colorscheme violet
"colorscheme solarized
"colorscheme tomorrow

""""""""""""""""""""""
"      Mappings      "
""""""""""""""""""""""

" Set leader shortcut to a comma ','. By default it's the backslash
let mapleader = ","

" Jump to next error with Ctrl-n and previous error with Ctrl-m. Close the
" quickfix window with <leader>a
map <C-n> :lnext<CR>
map <C-m> :lprevious<CR>
nnoremap <leader>a :cclose<CR>
nnoremap <silent> <F9> :TagbarToggle<CR>
nmap <silent> <F7> <Plug>ToggleProject
" nnoremap <leader><tab> :IndentLinesToggle<CR>

" Visual linewise up and down by default (and use gj gk to go quicker)
noremap <Up> gk
noremap <Down> gj
noremap j gj
noremap k gk

" Search mappings: These will make it so that going to the next one in a
" search will center on the line it's found in.
nnoremap n nzzzv
nnoremap N Nzzzv

" Act like D and C
nnoremap Y y$
" Enter automatically into the files directory
autocmd BufEnter * silent! lcd %:p:h

" reload vimrc
nnoremap <C-R> :so ~/.vimrc <CR>


"""""""""""""""""""""
"      Plugins      "
"""""""""""""""""""""
" indent line
let g:indentLine_enabled = 1
let g:indentLine_color_term = 239
" vim-project
let g:project_use_nerdtree = 1
" json-plugin
let g:vim_json_syntax_conceal = 0
" syntastic
let g:syntastic_auto_loc_list = 1
" vim-go
let g:syntastic_aggregate_errors = 1
let g:syntastic_go_checkers = ['govet']
"let g:syntastic_mode_map = { 'mode': 'active', 'passive_filetypes': ['go'] }
let g:go_fmt_command = "gofmt"
"let g:go_fmt_command = "goimports"
let g:go_autodetect_gopath = 1
let g:go_list_type = "locationlist"

let g:go_highlight_types = 1
let g:go_highlight_fields = 1
let g:go_highlight_functions = 1
let g:go_highlight_methods = 1
let g:go_highlight_extra_types = 1
let g:go_highlight_generate_tags = 1
let g:tagbar_type_go = {
    \ 'ctagstype': 'go',
    \ 'kinds' : [
        \'p:package',
        \'f:function',
        \'v:variables',
        \'t:type',
        \'c:const'
    \]
\}
" Open :GoDeclsDir with ctrl-g
nmap <C-g> :GoDeclsDir<cr>
imap <C-g> <esc>:<C-u>GoDeclsDir<cr>


augroup go
  autocmd!

  " Show TagbarToggle
  " autocmd BufReadPost *.go call tagbar#autoopen()
  " autocmd FileType go nmap <leader>w <Plug>(tagbar)
  " Show by default 4 spaces for a tab
  autocmd BufNewFile,BufRead *.go setlocal expandtab tabstop=4 shiftwidth=4

  " :GoBuild and :GoTestCompile
  autocmd FileType go nmap <leader>b :<C-u>call <SID>build_go_files()<CR>

  " :GoTest
  autocmd FileType go nmap <leader>t  <Plug>(go-test)

  " :GoRun
  autocmd FileType go nmap <leader>r  <Plug>(go-run)

  " :GoDoc
  autocmd FileType go nmap <Leader>d <Plug>(go-doc)

  " :GoCoverageToggle
  autocmd FileType go nmap <Leader>c <Plug>(go-coverage-toggle)

  " :GoInfo
  autocmd FileType go nmap <Leader>i <Plug>(go-info)

  " :GoMetaLinter
  autocmd FileType go nmap <Leader>l <Plug>(go-metalinter)

  " :GoDef but opens in a vertical split
  autocmd FileType go nmap <Leader>v <Plug>(go-def-vertical)
  " :GoDef but opens in a horizontal split
  autocmd FileType go nmap <Leader>s <Plug>(go-def-split)

  " :GoAlternate  commands :A, :AV, :AS and :AT
  autocmd Filetype go command! -bang A call go#alternate#Switch(<bang>0, 'edit')
  autocmd Filetype go command! -bang AV call go#alternate#Switch(<bang>0, 'vsplit')
  autocmd Filetype go command! -bang AS call go#alternate#Switch(<bang>0, 'split')
  autocmd Filetype go command! -bang AT call go#alternate#Switch(<bang>0, 'tabe')
augroup END

" build_go_files is a custom function that builds or compiles the test file.
" It calls :GoBuild if its a Go file, or :GoTestCompile if it's a test file
function! s:build_go_files()
  let l:file = expand('%')
  if l:file =~# '^\f\+_test\.go$'
    call go#cmd#Test(0, 1)
  elseif l:file =~# '^\f\+\.go$'
    call go#cmd#Build(0)
  endif
endfunction
"let g:SuperTabRetainCompletionType = 2
let g:SuperTabDefaultCompletionType = "<C-x><C-o>"
let g:ycm_autoclose_preview_window_after_completion=1


" Ali: to indent json files on save
" autocmd FileType json autocmd BufWritePre <buffer> %!python -m json.tool
" autocmd BufWritePre <buffer> %! sed -i "s/\t/    /g"

augroup py
  let g:ycm_python_binary_path = 'python'
  autocmd BufNewFile *.py 0r ~/.vim_custom/python_head.template
augroup END

let g:UltiSnipsExpandTrigger = "<leader><tab>"

augroup c
    "autocmd FileType c,cpp set tags+=tags
    autocmd FileType c,cpp set path+=/usr/include/
    autocmd BufNewFile,BufRead c,cpp setlocal expandtab tabstop=4 shiftwidth=4
augroup END

hi Normal ctermbg=NONE
